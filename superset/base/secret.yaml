apiVersion: v1
kind: Secret
metadata:
  name: superset-config
  labels:
    app: superset
stringData:
  superset_config.py: |
    import os
    from flask_appbuilder.security.manager import AUTH_OAUTH

    MAPBOX_API_KEY = os.getenv('MAPBOX_API_KEY', '')
    SQLALCHEMY_DATABASE_URI = 'postgresql://$(SUPERSET_DB_USERNAME):$(SUPERSET_DB_PASSWORD)@supersetdb:5432/supersetdb'
    SQLALCHEMY_TRACK_MODIFICATIONS = True
    SECRET_KEY = os.getenv('SUPERSET_SECRET_KEY', '$(SUPERSET_SECRET_KEY)')
    DATA_DIR = '/var/lib/superset'
    LOG_LEVEL = 'DEBUG'
    FEATURE_FLAGS = {
        'ENABLE_TEMPLATE_PROCESSING': True,
    }

    AUTH_TYPE = AUTH_OAUTH
    OAUTH_PROVIDERS = [
        {'name': 'dex',
         'token_key': 'access_token',
         'icon': 'fa-address-card',
         'remote_app': {
             'client_id': 'superset',
             'client_secret': '3dafa9ab93397afce28186ae51f13668f16c005d5009bf9b3e368e425c0f7720',
             'client_kwargs': {
                 'scope': 'openid email groups profile offline_access'
             },
             'api_base_url': 'http://dex-dex.apps.odh-cl1.apps.os-climate.org/userinfo',
             'access_token_url': 'http://dex-dex.apps.odh-cl1.apps.os-climate.org/token',
             'authorize_url': 'http://dex-dex.apps.odh-cl1.apps.os-climate.org/auth'
         }
         }
    ]

    # Will allow user self registration, allowing to create Flask users from Authorized User
    AUTH_USER_REGISTRATION = True

    # The default user self registration role
    AUTH_USER_REGISTRATION_ROLE = "Public"

    from custom_sso_security_manager import CustomSsoSecurityManager
    CUSTOM_SECURITY_MANAGER = CustomSsoSecurityManager

  custom_sso_security_manager.py: |
    import logging
    from superset.security import SupersetSecurityManager


    class CustomSsoSecurityManager(SupersetSecurityManager):

        def oauth_user_info(self, provider, response=None):
            logging.debug("Oauth2 provider: {0}.".format(provider))
            if provider == 'dex':
                # As example, this line request a GET to base_url + '/' + userDetails with Bearer  Authentication,
                # and expects that authorization server checks the token, and response with user details
                me = self.appbuilder.sm.oauth_remotes[provider].get('userinfo')
                logging.debug("userinfo: {0}".format(me))
                me = me.json()
                logging.debug("user_data: {0}".format(me))
                return {'name': me['email'], 'email': me['email'], 'id': me['email'], 'username': me['email'],
                        'first_name': '', 'last_name': ''}